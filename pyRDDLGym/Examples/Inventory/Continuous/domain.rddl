// Simple linear continuous inventory control problem

domain inventory {

	types {
		item : object;
	};

	pvariables {

		PURCHASE-COST(item) : { non-fluent, real, default = 1.0 };
		PRICE(item)         : { non-fluent, real, default = 2.0 };
		MAX-ITEMS           : { non-fluent, int, default = 10 };
		MIN-DEMAND(item) : { non-fluent, real, default = 0.0 }; 
		MAX-DEMAND(item) : { non-fluent, real, default = 4.0 };
		
		raw-demand(item) : { interm-fluent, real }; 
		
		stock(item) : { state-fluent, real, default = 0.0 };
	
		order(item) : { action-fluent, int, default = 0 };
	};

	cpfs {
		raw-demand(?i) = Uniform(MIN-DEMAND(?i), MAX-DEMAND(?i));
		stock'(?i) = max[0, stock(?i) + order(?i) - raw-demand(?i)];
	};

	reward = (sum_{?i : item} [PRICE(?i) * (stock(?i) + order(?i) - stock'(?i)) - PURCHASE-COST(?i) * order(?i)]);

	action-preconditions {
		forall_{?i : item} [ order(?i) >= 0 ];
		(sum_{?i : item} [stock(?i) + order(?i)]) <= MAX-ITEMS;
	};
	
	state-invariants {
		forall_{?i : item} [ stock(?i) >= 0 ];
		(sum_{?i : item} stock(?i)) <= MAX-ITEMS;
	};
}